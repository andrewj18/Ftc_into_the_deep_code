package org.firstinspires.ftc.teamcode.Base;

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.TouchSensor;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;

@TeleOp(name = "DriverControl")
public class DriverControl extends RobotStructure {
private boolean motorState = false;
private final double targetLiftHeightUp = 5400;
private final double targetLiftHeightDown = 900;

    @Override
    public void init() {
        super.init(); // Ensure RobotStructure's initialization happens
    boolean touchdropState = touchdrop.isPressed();

    
    telemetry.addData("Touchdrop Sensor State", touchdropState ? "Pressed" : "Released");
    telemetry.addData("Touchgrab Sensor State", touchdropState ? "Pressed" : "Released");

    telemetry.update();
    ArmOne.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    ArmTwo.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

      // Initialize encoders for lift motors
      robot.liftLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER); 
      robot.liftRight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER); 
      robot.liftLeft.setMode(DcMotor.RunMode.RUN_USING_ENCODER); 
      robot.liftRight.setMode(DcMotor.RunMode.RUN_USING_ENCODER); 

    }

    @Override
    public void loop() {
        // Run motor and servo control logic
        initDriver();
        controlMotors();
        controlServos();
        updateTelemetry();
    }

    private void initDriver() {
        float gamepad1LeftY = gamepad1.left_stick_y;
        float gamepad1LeftX = gamepad1.left_stick_x;
        float gamepad2RightY = gamepad2.right_stick_y;
        float gamepad1RightX = -gamepad1.right_stick_x;
        float gamepad2LeftY = gamepad2.left_stick_y;

        // Adjust the signs for translation
        float translation = -gamepad1LeftX;
        float rotation = gamepad1RightX;

        float frontRightPower = -gamepad1LeftY + translation + rotation;
        float frontLeftPower = -gamepad1LeftY - translation - rotation;
        float backLeftPower = -gamepad1LeftY + translation - rotation;
        float backRightPower = -gamepad1LeftY - translation + rotation;

        motorFrontLeft.setPower(-frontLeftPower / 1.5);
        motorBackLeft.setPower(-backLeftPower / 1.5);
        motorFrontRight.setPower(-frontRightPower / 1.5);
        motorBackRight.setPower(-backRightPower / 1.5);
    }

    private void controlMotors() {
        // arm code 
        if (gamepad2.right_bumper && !touchgrab.isPressed() ) {
            ArmOne.setPower(-0.3); // Towards Grab
            ArmTwo.setPower(-0.3);
        } if (gamepad2.left_bumper  &&!touchdrop.isPressed()  ) {
            ArmOne.setPower(0.3); // Toward Bucket
            ArmTwo.setPower(0.3);
} else {
    ArmOne.setPower(-0);
    ArmTwo.setPower(0);
}
// End the run arms

 // Lift motors
 if (gamepad1.x && (Math.abs(robot.liftLeft.getCurrentPosition()) < targetLiftHeightUp)) {
    // liftLeft , liftRight
    liftLeft.setPower(0.75);
    liftRight.setPower(-0.75);
} else if (gamepad1.x && (Math.abs(robot.liftLeft.getCurrentPosition()) > targetLiftHeightDown)) {
    // liftLeft , liftRight
    liftLeft.setPower(-0.75);
    liftRight.setPower(0.75);
}
        // to hold the lift in place
        else if (gamepad1.left_bumper) {
            liftLeft.setPower(0.1);
            liftRight.setPower(-0.1);
        } 
        else if (gamepad1.right_bumper) {
            liftLeft.setPower(-1);
            liftRight.setPower(1);
        }
else if (gamepad1.left_bumper) {
    // toggle the motor state, either on or off. (like a switch)
    motorState = !motorState;

     if (motorState) {
        // turn the motor on
        liftLeft.setPower(0.2); 
     liftRight.setPower(-0.2);
     telemetry.addData("lifts motor State","OFF")


}
 else {
    //Turn the motor off 
    lift.Left.setPower(0);
    liftRight.setPower(0);
    telemetry.addData("lifts motor State","OFF")
 }
}
        else {
            liftLeft.setPower(0);
            liftRight.setPower(0);
        }
    }

    private void controlServos() {
        if (gamepad2.a) {
            clawServo.setPosition(0.40); // Set servoTwo to 0.40 when button A is pressed (pick up)
        }
        if (gamepad2.b) {
            clawServo.setPosition(0.10); // Set servoTwo to 0.10 when button B is pressed (release)
        }
        // Code for bucket servo
        if (gamepad2.left_bumper) {
            bucketServo.setPosition(0.30); // Set bucketServo to 0.40 when button left bumper is pressed (Score Position)
        }
        if (gamepad2.right_bumper) {
            bucketServo.setPosition(0.5); // Set bucketServo to 0.10 when right bumper is pressed (drop position)
        }
    }

    public void setDriverMotorPower(double FRightPower, double FLeftPower, double BRightPower, double BLeftPower) {
        motorFrontRight.setPower(FRightPower);
        motorFrontLeft.setPower(FLeftPower);
        motorBackRight.setPower(BRightPower);
        motorBackLeft.setPower(BLeftPower);
    }

    private void updateTelemetry() {
        boolean touchStateDrop = !touchdrop.isPressed(); // Get touchdrop sensor state
        telemetry.addData("Drop Sensor", touchStateDrop ? "Released" : "Pressed");
        boolean touchStateGrab = !touchgrab.isPressed(); // Get touchgrab sensor state
        telemetry.addData("Grab Sensor", touchStateGrab ? "Released" : "Pressed");

        telemetry.update(); // Update telemetry display
    }

